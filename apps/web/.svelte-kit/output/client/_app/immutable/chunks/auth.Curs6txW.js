import{w}from"./index.CtH2YV38.js";import{s as i}from"./supabaseClient.1oeZSPjs.js";import{g as m}from"./entry.B5jMEGBp.js";class d extends Error{}d.prototype.name="InvalidTokenError";function A(e){return decodeURIComponent(atob(e).replace(/(.)/g,(r,o)=>{let s=o.charCodeAt(0).toString(16).toUpperCase();return s.length<2&&(s="0"+s),"%"+s}))}function y(e){let r=e.replace(/-/g,"+").replace(/_/g,"/");switch(r.length%4){case 0:break;case 2:r+="==";break;case 3:r+="=";break;default:throw new Error("base64 string is not of the correct length")}try{return A(r)}catch{return atob(r)}}function v(e,r){if(typeof e!="string")throw new d("Invalid token specified: must be a string");r||(r={});const o=r.header===!0?0:1,s=e.split(".")[o];if(typeof s!="string")throw new d(`Invalid token specified: missing part #${o+1}`);let a;try{a=y(s)}catch(n){throw new d(`Invalid token specified: invalid base64 for part #${o+1} (${n.message})`)}try{return JSON.parse(a)}catch(n){throw new d(`Invalid token specified: invalid json for part #${o+1} (${n.message})`)}}const _=e=>new Promise((r,o)=>{setTimeout(()=>o(new Error("Operation timed out")),e)}),c=w(null),l=w(null),u=w(null),h=w(!1),D={subscribe:c.subscribe},I={subscribe:l.subscribe},x={subscribe:u.subscribe};h.subscribe;const p=e=>{var r,o,s,a;try{const n=v(e);console.log("[JWT Debug] Full decoded token:",n),console.log("[JWT Debug] App metadata:",n.app_metadata);const t=(r=n.app_metadata)!=null&&r.role_emulation?n.app_metadata.role_emulation:null;return console.log("[JWT Debug] Role emulation state:",{active:t==null?void 0:t.active,original_role:t==null?void 0:t.original_role,emulated_role:t==null?void 0:t.emulated_role,original_org_id:t==null?void 0:t.original_org_id,emulated_org_id:t==null?void 0:t.emulated_org_id,expires_at:t==null?void 0:t.expires_at,session_id:t==null?void 0:t.session_id,context:t==null?void 0:t.context}),{baseRole:(t==null?void 0:t.original_role)||((o=n.app_metadata)==null?void 0:o.role),currentRole:t!=null&&t.active?t.emulated_role:(s=n.app_metadata)==null?void 0:s.role,emulatedRole:t!=null&&t.active?t.emulated_role:null,isEmulating:(t==null?void 0:t.active)||!1,status:t!=null&&t.active?"active":null,emulationExpiry:(t==null?void 0:t.expires_at)||null,sessionId:(t==null?void 0:t.session_id)||null,originalOrgId:(t==null?void 0:t.original_org_id)||((a=n.app_metadata)==null?void 0:a.org_id),emulatedOrgId:(t==null?void 0:t.emulated_org_id)||null,context:t!=null&&t.active?t.context:null,createdAt:null}}catch(n){return console.error("[JWT Debug] Error decoding token:",n),{}}},f=async e=>{const{data:r,error:o}=await i.from("profiles").select().eq("id",e).single();return o?(console.error("Error loading profile:",o),null):r},g=async()=>{try{const{data:{session:e},error:r}=await i.auth.refreshSession();if(r)throw r;if(!e)throw new Error("No session after refresh");l.set(e),c.set(e.user);const o=await f(e.user.id);if(!o)throw new Error("Failed to load user profile after refresh");u.set(o);const{data:s}=await i.from("role_emulation_sessions").select("*").eq("user_id",e.user.id).eq("status","active").single();console.log("[Role Emulation Debug] Active Session:",s);const a=p(e.access_token);return console.log("[Role Emulation Debug] JWT Role Data:",a),{success:!0,session:e}}catch(e){return console.error("Session refresh error:",e),{success:!1,error:e instanceof Error?e.message:"An unknown error occurred"}}};{console.log("[Auth Debug] Initializing auth state..."),i.auth.getSession().then(async({data:{session:o},error:s})=>{if(console.log("[Auth Debug] Initial session:",o),console.log("[Auth Debug] Session error:",s),s){console.error("[Auth Debug] Error getting session:",s);return}if(o){l.set(o),c.set(o.user);const a=await f(o.user.id);if(a){u.set(a);const{data:n,error:t}=await i.from("role_emulation_sessions").select("*").eq("user_id",o.user.id).eq("status","active").gt("expires_at",new Date().toISOString()).single();t&&t.code!=="PGRST116"&&console.error("[Auth Debug] Error checking emulation:",t),console.log("[Auth Debug] Active emulation session:",n);const b=p(o.access_token);console.log("[Auth Debug] Role emulation from JWT:",b)}else console.log("[Auth Debug] No user profile found")}else console.log("[Auth Debug] No session found")}).catch(o=>{console.error("[Auth Debug] Error initializing auth state:",o)});const r=setInterval(async()=>{const{data:{session:o}}=await i.auth.getSession();o&&await g()},6e5);window.addEventListener("beforeunload",()=>clearInterval(r)),i.auth.onAuthStateChange(async(o,s)=>{if(s){l.set(s),c.set(s.user);const a=await f(s.user.id);a&&(u.set(a),p(s.access_token))}else S.clearSession()})}const S={extractRoleFromJWT:p,loadUserProfile:f,refreshSession:g,signIn:async(e,r)=>{try{const{data:o,error:s}=await i.auth.signInWithPassword({email:e,password:r});if(s)throw s;if(!o.session)throw new Error("No session after sign in");return await g(),{success:!0,data:o}}catch(o){return console.error("Sign in error:",o),{success:!1,error:o instanceof Error?o.message:"An unknown error occurred"}}},signOut:async()=>{console.log("[Auth] Starting sign out process");try{h.set(!0),console.log("[Auth] Set isLoggingOut to true");try{console.log("[Auth] Attempting to end any active emulation");const e=await Promise.race([fetch("/api/role-emulation",{method:"DELETE",headers:{"Content-Type":"application/json"}}),_(5e3)]);e.ok?console.log("[Auth] Emulation end request completed"):console.error("[Auth] Failed to end emulation:",await e.text())}catch(e){console.error("[Auth] Error ending emulation:",e)}try{console.log("[Auth] Calling server-side signout endpoint");const e=await Promise.race([fetch("/auth/signout",{method:"POST",headers:{"Content-Type":"application/json"}}),_(5e3)]);e.ok?console.log("[Auth] Server signout successful"):console.error("[Auth] Server signout failed:",await e.text())}catch(e){console.error("[Auth] Server signout error:",e)}console.log("[Auth] Clearing all stores"),c.set(null),l.set(null),u.set(null),console.log("[Auth] Redirecting to auth page"),await m("/auth"),console.log("[Auth] Sign out process complete")}catch(e){console.error("[Auth] Error during sign out:",e);try{await m("/auth")}catch(r){console.error("[Auth] Failed to redirect after error:",r)}}finally{h.set(!1),console.log("[Auth] Set isLoggingOut back to false")}},startRoleEmulation:async(e,r=4)=>{try{const o=await fetch("/api/role-emulation",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({emulatedRole:e,durationHours:r})});if(!o.ok){const a=await o.json();throw new Error(a.message||"Failed to start role emulation")}const s=await o.json();return console.log("[Role Emulation] Start result:",s),await g(),{success:!0,data:s.data}}catch(o){throw console.error("[Role Emulation] Start error:",o),o}},stopRoleEmulation:async()=>{try{const e=await fetch("/api/role-emulation/stop",{method:"POST",headers:{"Content-Type":"application/json"}});if(!e.ok){const o=await e.json();throw new Error(o.message||"Failed to stop role emulation")}const r=await e.json();return console.log("[Role Emulation] Stop result:",r),await g(),{success:!0,data:r.data}}catch(e){throw console.error("[Role Emulation] Stop error:",e),e}},checkActiveEmulation:async()=>{const{data:e}=await i.auth.getSession();if(!(e!=null&&e.session))return null;const{data:r}=await i.from("role_emulation_sessions").select("*").eq("user_id",e.session.user.id).eq("status","active").single();return r},endEmulation:async()=>{try{const e=await fetch("/api/role-emulation",{method:"DELETE",headers:{"Content-Type":"application/json"}});if(!e.ok){const r=await e.text();throw console.error("[Auth] Failed to end emulation:",r),new Error(r)}console.log("[Auth] Successfully ended emulation")}catch(e){throw console.error("[Auth] Error ending emulation:",e),e}},clearSession:()=>{c.set(null),l.set(null),u.set(null),h.set(!1)},resetPassword:async e=>{const{error:r}=await i.auth.resetPasswordForEmail(e);if(r)throw r},updatePassword:async e=>{const{error:r}=await i.auth.updateUser({password:e});if(r)throw r}};export{S as a,x as p,I as s,D as u};
