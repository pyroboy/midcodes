import { z } from 'zod';

// DPI validation schema
export const dpiSchema = z
	.number()
	.min(72, 'DPI must be at least 72')
	.max(600, 'DPI cannot exceed 600')
	.default(300);

// Pixel dimension schemas
export const pixelDimensionSchema = z
	.number()
	.int('Dimension must be a whole number')
	.min(100, 'Dimension must be at least 100 pixels')
	.max(7200, 'Dimension cannot exceed 7200 pixels'); // 24" at 300 DPI

// Template creation input schema (from user)
export const templateCreationInputSchema = z.object({
	name: z
		.string()
		.trim()
		.min(1, 'Template name is required')
		.max(100, 'Template name must be less than 100 characters'),
	description: z.string().optional(),
	width_pixels: pixelDimensionSchema,
	height_pixels: pixelDimensionSchema,
	dpi: dpiSchema
});

// Template creation data for database insert (matches actual database schema)
export const templateCreationDataSchema = templateCreationInputSchema.extend({
	id: z.string().uuid().optional(), // Generated by database
	user_id: z.string().uuid(),
	org_id: z.string().uuid(),
	front_background: z.string().optional(), // Can be URL or path
	back_background: z.string().optional(), // Can be URL or path
	orientation: z.enum(['landscape', 'portrait']).optional(),
	template_elements: z.array(z.any()).default([]), // Will reference template element schema
	created_at: z.string().datetime().optional(), // Generated by database
	updated_at: z.string().datetime().optional()
});

// Preset template dimensions
export const templatePresetSchema = z.object({
	id: z.string(),
	name: z.string(),
	description: z.string(),
	width_pixels: pixelDimensionSchema,
	height_pixels: pixelDimensionSchema,
	dpi: dpiSchema,
	category: z.enum(['cards', 'badges', 'documents', 'custom']).default('cards')
});

// DPI option for user selection
export const dpiOptionSchema = z.object({
	value: z.number().min(72).max(600),
	label: z.string(),
	description: z.string(),
	category: z.enum(['draft', 'standard', 'high', 'premium'])
});

// Inferred types for export
export type TemplateCreationInput = z.infer<typeof templateCreationInputSchema>;
export type TemplateCreationData = z.infer<typeof templateCreationDataSchema>;
export type TemplatePreset = z.infer<typeof templatePresetSchema>;
export type DpiOption = z.infer<typeof dpiOptionSchema>;