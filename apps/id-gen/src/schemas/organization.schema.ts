import { z } from 'zod';

// Organization creation schema
export const organizationCreationSchema = z.object({
	name: z
		.string()
		.min(1, 'Organization name is required')
		.max(100, 'Organization name must be less than 100 characters')
		.trim(),
	description: z
		.string()
		.max(500, 'Description must be less than 500 characters')
		.optional(),
	settings: z.record(z.string(), z.any()).default({})
});

// Organization database schema (matches organizations table)
export const organizationDataSchema = organizationCreationSchema.extend({
	id: z.string().uuid().optional(), // Generated by database
	created_at: z.string().datetime().optional(),
	updated_at: z.string().datetime().optional()
});

// Organization response schema
export const organizationResponseSchema = z.object({
	id: z.string().uuid(),
	name: z.string(),
	description: z.string().nullable(),
	settings: z.record(z.string(), z.any()).nullable(),
	created_at: z.string().datetime(),
	updated_at: z.string().datetime()
});

// Organization update schema
export const organizationUpdateSchema = z.object({
	id: z.string().uuid(),
	name: z
		.string()
		.min(1, 'Organization name is required')
		.max(100, 'Organization name must be less than 100 characters')
		.trim()
		.optional(),
	description: z
		.string()
		.max(500, 'Description must be less than 500 characters')
		.optional(),
	settings: z.record(z.string(), z.any()).optional()
});

// Organization settings schema (org_settings table)
export const orgSettingsSchema = z.object({
	org_id: z.string().uuid(),
	payments_enabled: z.boolean().default(true),
	payments_bypass: z.boolean().default(false),
	updated_by: z.string().uuid().optional(),
	updated_at: z.string().datetime().optional()
});

// Organization settings update schema
export const orgSettingsUpdateSchema = z.object({
	org_id: z.string().uuid(),
	payments_enabled: z.boolean().optional(),
	payments_bypass: z.boolean().optional(),
	updated_by: z.string().uuid()
});

// Organization member management schemas
export const organizationMemberSchema = z.object({
	id: z.string().uuid(),
	email: z.string().email(),
	role: z.enum(['super_admin', 'org_admin', 'id_gen_admin', 'id_gen_user']),
	created_at: z.string().datetime(),
	updated_at: z.string().datetime(),
	org_id: z.string().uuid(),
	context: z.record(z.string(), z.any()).nullable()
});

export const organizationInviteSchema = z.object({
	org_id: z.string().uuid(),
	email: z.string().email('Valid email is required'),
	role: z.enum(['org_admin', 'id_gen_admin', 'id_gen_user']),
	invited_by: z.string().uuid(),
	expires_at: z.string().datetime().optional()
});

export const organizationMemberUpdateSchema = z.object({
	user_id: z.string().uuid(),
	org_id: z.string().uuid(),
	role: z.enum(['org_admin', 'id_gen_admin', 'id_gen_user']).optional(),
	context: z.record(z.string(), z.any()).optional()
});

// Organization statistics schema
export const organizationStatsSchema = z.object({
	org_id: z.string().uuid(),
	total_templates: z.number(),
	total_id_cards: z.number(),
	active_users: z.number(),
	templates_this_month: z.number(),
	cards_this_month: z.number(),
	storage_usage: z.object({
		total_bytes: z.number(),
		templates_bytes: z.number(),
		cards_bytes: z.number(),
		formatted_size: z.string()
	}),
	usage_trends: z.array(z.object({
		date: z.string().datetime(),
		templates_created: z.number(),
		cards_generated: z.number()
	})).optional()
});

// Organization limits schema
export const organizationLimitsSchema = z.object({
	org_id: z.string().uuid(),
	max_templates: z.number().default(-1), // -1 for unlimited
	max_users: z.number().default(-1),
	max_storage_bytes: z.number().default(-1),
	max_cards_per_month: z.number().default(-1),
	features: z.object({
		custom_branding: z.boolean().default(false),
		advanced_templates: z.boolean().default(false),
		api_access: z.boolean().default(false),
		bulk_operations: z.boolean().default(false),
		export_formats: z.array(z.enum(['pdf', 'png', 'jpeg', 'svg'])).default(['png'])
	})
});

// Organization billing schema
export const organizationBillingSchema = z.object({
	org_id: z.string().uuid(),
	plan: z.enum(['free', 'starter', 'professional', 'enterprise']),
	billing_email: z.string().email().optional(),
	payment_method: z.object({
		type: z.enum(['credit_card', 'bank_transfer', 'invoice']),
		last_four: z.string().optional(),
		expires_at: z.string().optional()
	}).optional(),
	subscription: z.object({
		status: z.enum(['active', 'canceled', 'past_due', 'trialing']),
		current_period_start: z.string().datetime(),
		current_period_end: z.string().datetime(),
		trial_end: z.string().datetime().optional()
	}).optional()
});

// Organization search schema
export const organizationSearchSchema = z.object({
	query: z.string().max(100).optional(),
	limit: z.number().min(1).max(100).default(20),
	offset: z.number().min(0).default(0),
	sort_by: z.enum(['name', 'created_at', 'updated_at']).default('created_at'),
	sort_order: z.enum(['asc', 'desc']).default('desc'),
	filters: z.object({
		created_after: z.string().datetime().optional(),
		created_before: z.string().datetime().optional(),
		has_active_users: z.boolean().optional()
	}).optional()
});

// Inferred types for export
export type OrganizationCreation = z.infer<typeof organizationCreationSchema>;
export type OrganizationData = z.infer<typeof organizationDataSchema>;
export type OrganizationResponse = z.infer<typeof organizationResponseSchema>;
export type OrganizationUpdate = z.infer<typeof organizationUpdateSchema>;
export type OrgSettings = z.infer<typeof orgSettingsSchema>;
export type OrgSettingsUpdate = z.infer<typeof orgSettingsUpdateSchema>;
export type OrganizationMember = z.infer<typeof organizationMemberSchema>;
export type OrganizationInvite = z.infer<typeof organizationInviteSchema>;
export type OrganizationMemberUpdate = z.infer<typeof organizationMemberUpdateSchema>;
export type OrganizationStats = z.infer<typeof organizationStatsSchema>;
export type OrganizationLimits = z.infer<typeof organizationLimitsSchema>;
export type OrganizationBilling = z.infer<typeof organizationBillingSchema>;
export type OrganizationSearch = z.infer<typeof organizationSearchSchema>;