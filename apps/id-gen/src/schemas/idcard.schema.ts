import { z } from 'zod';

// ID Card creation input schema
export const idCardCreationInputSchema = z.object({
	template_id: z.string().uuid('Template ID must be a valid UUID'),
	org_id: z.string().uuid('Organization ID must be a valid UUID'),
	data: z.record(z.string(), z.any()).default({}), // Form field data as key-value pairs
	front_image: z.string().url('Front image must be a valid URL').optional(),
	back_image: z.string().url('Back image must be a valid URL').optional()
});

// ID Card database schema (matches the idcards table)
export const idCardDataSchema = idCardCreationInputSchema.extend({
	id: z.string().uuid().optional(), // Generated by database
	created_at: z.string().datetime().optional() // Generated by database
});

// ID Card response schema (from database)
export const idCardResponseSchema = z.object({
	id: z.string().uuid(),
	template_id: z.string().uuid(),
	org_id: z.string().uuid(),
	front_image: z.string().nullable(),
	back_image: z.string().nullable(),
	data: z.record(z.string(), z.any()).nullable(),
	created_at: z.string().datetime()
});

// ID Card form data schema (user input for form fields)
export const idCardFormDataSchema = z.object({
	template_id: z.string().uuid(),
	form_fields: z.record(z.string(), z.union([
		z.string(),
		z.number(),
		z.boolean(),
		z.null()
	])).default({})
});

// ID Card generation request schema
export const idCardGenerationRequestSchema = z.object({
	template_id: z.string().uuid(),
	form_data: z.record(z.string(), z.any()),
	render_options: z.object({
		format: z.enum(['png', 'pdf', 'jpeg']).default('png'),
		quality: z.number().min(0.1).max(1).default(1),
		background_color: z.string().optional(),
		include_bleed: z.boolean().default(false)
	}).optional()
});

// ID Card search/filter schema
export const idCardSearchSchema = z.object({
	org_id: z.string().uuid(),
	template_id: z.string().uuid().optional(),
	created_after: z.string().datetime().optional(),
	created_before: z.string().datetime().optional(),
	search_text: z.string().max(100).optional(),
	limit: z.number().min(1).max(100).default(20),
	offset: z.number().min(0).default(0)
});

// ID Card bulk operations schema
export const idCardBulkOperationSchema = z.object({
	card_ids: z.array(z.string().uuid()).min(1, 'At least one ID card ID is required'),
	operation: z.enum(['delete', 'export', 'regenerate']),
	parameters: z.object({
		export_format: z.enum(['pdf', 'zip']).optional(),
		include_metadata: z.boolean().default(false)
	}).optional()
});

// Image upload handling schemas
export const imageUploadSchema = z.object({
	file: z.any(), // File object
	max_size: z.number().default(10 * 1024 * 1024), // 10MB default
	allowed_types: z.array(z.string()).default(['image/png', 'image/jpeg', 'image/webp'])
});

export const imageUploadResultSchema = z.object({
	front_path: z.string(),
	back_path: z.string(),
	error: z.string().optional()
});

export const imageUploadErrorSchema = z.object({
	error: z.string(),
	front_path: z.never().optional(),
	back_path: z.never().optional()
});

// Storage operation schemas
export const storageDeleteSchema = z.object({
	bucket: z.string(),
	paths: z.array(z.string()).min(1, 'At least one path is required')
});

export const storageUploadSchema = z.object({
	bucket: z.string(),
	file: z.any(), // File/Blob object
	path: z.string(),
	options: z.object({
		cache_control: z.string().default('3600'),
		content_type: z.string().default('image/png'),
		upsert: z.boolean().default(true)
	}).optional()
});

// ID Card validation schema
export const idCardValidationSchema = z.object({
	is_valid: z.boolean(),
	errors: z.array(z.object({
		field: z.string(),
		message: z.string(),
		code: z.string().optional()
	})),
	warnings: z.array(z.object({
		field: z.string(),
		message: z.string(),
		suggestion: z.string().optional()
	})).optional()
});

// ID Card statistics schema
export const idCardStatsSchema = z.object({
	total_cards: z.number(),
	cards_this_month: z.number(),
	cards_today: z.number(),
	most_used_template: z.object({
		template_id: z.string().uuid(),
		template_name: z.string(),
		usage_count: z.number()
	}).optional(),
	recent_activity: z.array(z.object({
		date: z.string().datetime(),
		count: z.number()
	})).optional()
});

// Inferred types for export
export type IdCardCreationInput = z.infer<typeof idCardCreationInputSchema>;
export type IdCardData = z.infer<typeof idCardDataSchema>;
export type IdCardResponse = z.infer<typeof idCardResponseSchema>;
export type IdCardFormData = z.infer<typeof idCardFormDataSchema>;
export type IdCardGenerationRequest = z.infer<typeof idCardGenerationRequestSchema>;
export type IdCardSearch = z.infer<typeof idCardSearchSchema>;
export type IdCardBulkOperation = z.infer<typeof idCardBulkOperationSchema>;
export type ImageUpload = z.infer<typeof imageUploadSchema>;
export type ImageUploadResult = z.infer<typeof imageUploadResultSchema>;
export type ImageUploadError = z.infer<typeof imageUploadErrorSchema>;
export type StorageDelete = z.infer<typeof storageDeleteSchema>;
export type StorageUpload = z.infer<typeof storageUploadSchema>;
export type IdCardValidation = z.infer<typeof idCardValidationSchema>;
export type IdCardStats = z.infer<typeof idCardStatsSchema>;